document.addEventListener('DOMContentLoaded', () => {

    // --- üçî HAMBURGER MENU ---
    const hamburger = document.querySelector('.hamburger');
    const navMenu = document.querySelector('.nav-menu');
    const navLinks = document.querySelectorAll('.nav-link');
    const progressBar = document.querySelector('.home-progress-bar-container');

    hamburger.addEventListener('click', () => {
        hamburger.classList.toggle('active');
        navMenu.classList.toggle('active');

        if (navMenu.classList.contains('active')) {
            progressBar.classList.add('hide-progress');
        } else {
            progressBar.classList.remove('hide-progress');
        }
    });

    // Close menu when a link is clicked
    navLinks.forEach(link => link.addEventListener('click', () => {
        hamburger.classList.remove('active');
        navMenu.classList.remove('active');
        progressBar.classList.remove('hide-progress');
    }));

    // --- ‚å®Ô∏è TYPEWRITER EFFECT ---
    const typewriterHeading = document.querySelector('.typewriter-heading');
    const texts = ["Crafting Visual Stories.", "Designing Brand Identities.", "Building Digital Experiences."];
    let textIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < texts[textIndex].length) {
            typewriterHeading.textContent += texts[textIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, 100);
        } else {
            setTimeout(erase, 2000);
        }
    }

    function erase() {
        if (charIndex > 0) {
            typewriterHeading.textContent = texts[textIndex].substring(0, charIndex - 1);
            charIndex--;
            setTimeout(erase, 50);
        } else {
            textIndex = (textIndex + 1) % texts.length;
            setTimeout(type, 500);
        }
    }
    type();
    
    // Services Section
    const serviceCategories = document.querySelector('.service-categories');
    const serviceItemsContainer = document.querySelector('.service-items-container');

    // Services Data Structure
const servicesData = {
        'digital-invitations': {
            name: 'Digital Invitation Cards',
            items: [
    {
      icon: '<i class="fa-solid fa-ring"></i>',
      name: 'Wedding Invitations',
      description: 'Elegant invites to make your special day unforgettable.'
    },
    {
      icon: '<i class="fa-solid fa-heart"></i>',
      name: 'Engagement Invitations',
      description: 'Stylish digital invites to celebrate love and commitment.'
    },
    {
      icon: '<i class="fa-solid fa-calendar-days"></i>',
      name: 'Save-the-Date Cards',
      description: 'Beautiful reminders for your important day.'
    },
    {
      icon: '<i class="fa-solid fa-cake-candles"></i>',
      name: 'Birthday Party & Anniversary',
      description: 'Vibrant designs for all celebrations.'
    },
    {
      icon: '<i class="fa-solid fa-users"></i>',
      name: 'Community Gathering',
      description: 'Graphics that bring people together.'
    },
    {
      icon: '<i class="fa-solid fa-store"></i>',
      name: 'Grand Opening',
      description: 'Catchy invites for your new launch.'
    }
            ]
        },
        'business-branding': {
            name: 'Business Branding',
            items: [
    {
      icon: '<i class="fa-solid fa-lightbulb"></i>',
      name: 'Logo Design',
      description: 'Creative and professional logo designs.'
    },
    {
      icon: '<i class="fa-solid fa-address-card"></i>',
      name: 'Business Cards',
      description: 'Professional cards to leave a lasting impression.'
    },
    {
      icon: '<i class="fa-solid fa-share-nodes"></i>',
      name: 'Social Media Graphics',
      description: 'Attractive posts that align with your brand.'
    },
    {
      icon: '<i class="fa-solid fa-box"></i>',
      name: 'Packaging Design',
      description: 'Visually compelling and brand-aligned packaging.'
    }
            ]
        },
        'promotional-graphics': {
            name: 'Promotional Graphics',
            items: [
    {
      icon: '<i class="fa-solid fa-file-image"></i>',
      name: 'Posters, Flyers & Banners',
      description: 'Bold designs for maximum visibility.'
    },
    {
      icon: '<i class="fa-brands fa-instagram"></i>',
      name: 'Social Media Creatives',
      description: 'Daily content that captures attention.'
    },
    {
      icon: '<i class="fa-solid fa-clapperboard"></i>',
      name: 'Reels & Ad Graphics',
      description: 'Scroll-stopping visuals for your marketing campaigns.'
    }
  ]
        }
    };

    // Function to render services
    function renderServices(category) {
  serviceItemsContainer.innerHTML = '';

        const categoryData = servicesData[category];
        if (!categoryData) return;

        const servicesToRender = categoryData.items;

  if (servicesToRender.length === 0) {
    serviceItemsContainer.innerHTML = '<p style="text-align:center; color: var(--light-grey);">No services available.</p>';
    return;
  }

  servicesToRender.forEach(service => {
    const div = document.createElement('div');
    div.classList.add('service-item');
    div.innerHTML = `
      <div class="icon">${service.icon}</div>
      <h3>${service.name}</h3>
      <p>${service.description}</p>
    `;
    serviceItemsContainer.appendChild(div);
  });
}

    // Initialize Services
    function initializeServices() {
        const serviceCategories = document.querySelector('.service-categories');
        const serviceItemsContainer = document.querySelector('.service-items-container');

        // Set digital invitations as default
        const defaultCategory = 'digital-invitations';
        serviceCategories.querySelector(`[data-service-category="${defaultCategory}"]`).classList.add('active');
        renderServices(defaultCategory);

        // Add click handlers
        serviceCategories.addEventListener('click', (e) => {
            if (e.target.classList.contains('service-categories')) return;
            
            const category = e.target.dataset.serviceCategory;
            if (!category) return;

            // Update active state
            serviceCategories.querySelectorAll('button').forEach(btn => btn.classList.remove('active'));
            e.target.classList.add('active');

            // Render services
            renderServices(category);
        });
    }

    // Initialize when DOM is loaded
    initializeServices();

    // --- üñºÔ∏è IMAGE SLIDER (Stacking, Auto, 9 Slides) ---
    const slides = document.querySelectorAll('.slide');
    const dotsContainer = document.querySelector('.slider-dots');
    let currentSlide = 0;
    let slideInterval;

    // Create dots for the slider
    function createDots() {
        if (!dotsContainer) return;
        dotsContainer.innerHTML = '';
        for (let i = 0; i < slides.length; i++) {
            const dot = document.createElement('span');
            dot.classList.add('dot');
            if (i === 0) dot.classList.add('active');
            dotsContainer.appendChild(dot);
        }
    }

    function updateDots() {
        if (!dotsContainer) return;
        const dots = dotsContainer.querySelectorAll('.dot');
        dots.forEach((dot, i) => {
            dot.classList.toggle('active', i === currentSlide);
        });
    }

    function updateSlide() {
        slides.forEach((slide, i) => {
            slide.classList.remove('active', 'prev', 'next');
            if (i === currentSlide) {
                slide.classList.add('active');
            } else if (i === (currentSlide - 1 + slides.length) % slides.length) {
                slide.classList.add('prev');
            } else if (i === (currentSlide + 1) % slides.length) {
                slide.classList.add('next');
            }
        });
        updateDots();
    }

    function nextSlide() {
        currentSlide = (currentSlide + 1) % slides.length;
        updateSlide();
    }
    
    function prevSlide() {
        currentSlide = (currentSlide - 1 + slides.length) % slides.length;
        updateSlide();
    }

    function startInterval() {
        slideInterval = setInterval(nextSlide, 3500);
    }

    function resetInterval() {
        clearInterval(slideInterval);
        startInterval();
    }

    // Initialize slider
    if (slides.length > 0) {
        createDots();
        updateSlide();
        startInterval();
    }

    // Add event listeners for slider navigation buttons
    const prevBtn = document.querySelector('.prev-btn');
    const nextBtn = document.querySelector('.next-btn');
    if (prevBtn) prevBtn.addEventListener('click', () => { prevSlide(); resetInterval(); });
    if (nextBtn) nextBtn.addEventListener('click', () => { nextSlide(); resetInterval(); });

    // --- üé® PORTFOLIO LOADING & FILTERING WITH PAGINATION ---
    const portfolioGrid = document.getElementById('portfolio-grid');
    const filterBtns = document.querySelectorAll('.filter-btn');
    const popup = document.getElementById('fullscreen-popup');
    const popupImg = document.getElementById('popup-img');
    const popupCaption = document.getElementById('popup-caption');
    const popupClose = document.querySelector('.popup-close');
    let currentPortfolioPage = 1;
    const ITEMS_PER_PAGE = 12;
    let filteredPortfolioItems = [];

    // Load portfolio items from localStorage or fallback to default
    fetch('portfolio.json')
  .then(res => res.json())
  .then(data => {
    const mainCategoryEl = document.querySelector('.outer-filters');
    const subCategoryEl = document.querySelector('.inner-filters');
    const gridEl = document.querySelector('.portfolio-grid');

    const outerCategories = [...new Set(data.map(item => item.outerCategory))];
    let activeOuter = 'all';
    let activeInner = 'all';

    // Utility to format button label
    const formatName = name =>
      name.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());

    // Render Main Categories
    mainCategoryEl.innerHTML = `
      <button class="filter-btn active" data-category="all">All</button>
      ${outerCategories.map(cat => `<button class="filter-btn" data-category="${cat}">${formatName(cat)}</button>`).join('')}
    `;

    // Render Sub Categories
    function renderSubCategories(outer) {
      const innerCats = [...new Set(data.filter(item => item.outerCategory === outer).map(item => item.innerCategory))];
      if (innerCats.length === 0) {
        subCategoryEl.style.display = 'none';
        return;
      }
      subCategoryEl.style.display = 'flex';
      subCategoryEl.innerHTML = `
        <button class="inner-filter-btn active" data-sub="all">All</button>
        ${innerCats.map(sub => `<button class="inner-filter-btn" data-sub="${sub}">${formatName(sub)}</button>`).join('')}
      `;
    }

    // Render Portfolio Grid
    function renderGrid(items) {
      if (items.length === 0) {
        gridEl.innerHTML = `<p style="color: white;">No items found.</p>`;
        return;
      }

      gridEl.innerHTML = items.map(item => `
        <div class="portfolio-item">
          <img src="${item.src}" alt="${item.title}">
          <div class="gradient-title">
            <div>
              <div class="title">${item.title}</div>
              <div class="subtitle">${item.subtitle}</div>
            </div>
          </div>
        </div>
      `).join('');
    }

    // Apply filters
    function filterAndRender() {
      let filtered = data;
      if (activeOuter !== 'all') {
        filtered = filtered.filter(i => i.outerCategory === activeOuter);
        if (activeInner !== 'all') {
          filtered = filtered.filter(i => i.innerCategory === activeInner);
        }
      }
      renderGrid(filtered);
    }

    // Main Category Click Handler
    mainCategoryEl.addEventListener('click', e => {
      if (e.target.matches('button')) {
        [...mainCategoryEl.children].forEach(btn => btn.classList.remove('active'));
        e.target.classList.add('active');
        activeOuter = e.target.dataset.category;
        activeInner = 'all';

        if (activeOuter === 'all') {
          subCategoryEl.style.display = 'none';
        } else {
          renderSubCategories(activeOuter);
        }

        filterAndRender();
      }
    });

    // Sub Category Click Handler
    subCategoryEl.addEventListener('click', e => {
      if (e.target.matches('button')) {
        [...subCategoryEl.children].forEach(btn => btn.classList.remove('active'));
        e.target.classList.add('active');
        activeInner = e.target.dataset.sub;
        filterAndRender();
      }
    });

    // Initial Load
    filterAndRender();
  });


    // Pagination controls
    function renderPortfolioPagination(totalItems) {
        let pagination = document.getElementById('portfolio-pagination');
        if (!pagination) {
            pagination = document.createElement('div');
            pagination.id = 'portfolio-pagination';
            pagination.className = 'portfolio-pagination';
            portfolioGrid.parentElement.appendChild(pagination);
        }
        pagination.innerHTML = '';
        const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);
        if (totalPages <= 1) { pagination.style.display = 'none'; return; }
        pagination.style.display = 'flex';
        for (let i = 1; i <= totalPages; i++) {
            const btn = document.createElement('button');
            btn.textContent = i;
            btn.className = 'pagination-btn' + (i === currentPortfolioPage ? ' active' : '');
            btn.onclick = () => {
                currentPortfolioPage = i;
                renderPortfolioGrid();
            };
            pagination.appendChild(btn);
        }
    }

    function renderPortfolioGrid() {
        portfolioGrid.innerHTML = '';
        const start = (currentPortfolioPage - 1) * ITEMS_PER_PAGE;
        const end = start + ITEMS_PER_PAGE;
        const itemsToShow = filteredPortfolioItems.slice(start, end);
        itemsToShow.forEach(item => {
            const itemElement = document.createElement('div');
            itemElement.className = 'portfolio-item';
            itemElement.innerHTML = `
                <img src="${item.image}" alt="${item.title}" loading="lazy">
                <div class="gradient-title">${item.title}</div>
            `;
            itemElement.addEventListener('click', () => {
                showFullscreenPopup(item);
            });
            portfolioGrid.appendChild(itemElement);
        });
        renderPortfolioPagination(filteredPortfolioItems.length);
    }

    // Define subcategories for each main category
    const subcategories = {
        'digital-invitations': ['wedding', 'engagement', 'save-the-date', 'birthday', 'community', 'grand-opening'],
        'business-branding': ['logo', 'business-cards', 'social-media', 'packaging'],
        'promotional-graphics': ['posters', 'social-creatives', 'reels']
    };

    function filterPortfolioItems(category) {
        const allItems = getPortfolioItems();
        if (category === 'all') {
            filteredPortfolioItems = allItems;
        } else if (subcategories[category]) {
            // Main category: show all items with matching outerCategory or any of its subcategories
            filteredPortfolioItems = allItems.filter(item =>
                item.outerCategory === category ||
                subcategories[category].includes(item.innerCategory)
            );
        } else {
            // Subcategory: show only items with matching innerCategory
            filteredPortfolioItems = allItems.filter(item => item.innerCategory === category);
        }
        currentPortfolioPage = 1;
        renderPortfolioGrid();
    }

    function initializePortfolio() {
        const outerFilters = document.querySelector('.outer-filters');
        const allInnerFilters = document.querySelectorAll('.inner-filters');

        // Set "All" as default
        const allBtn = outerFilters.querySelector('[data-filter="all"]');
        if (allBtn) {
            allBtn.classList.add('active');
            allInnerFilters.forEach(f => f.style.display = 'none');
            filterPortfolioItems('all');
        }

        outerFilters.addEventListener('click', (e) => {
            if (e.target.classList.contains('filter-btn')) {
                const category = e.target.dataset.filter;
                outerFilters.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
                e.target.classList.add('active');

                // Hide all subcategory containers and remove active state from all subcategory buttons
                allInnerFilters.forEach(f => {
                    f.style.display = 'none';
                    f.querySelectorAll('.inner-filter-btn').forEach(btn => btn.classList.remove('active'));
                });

                if (category === 'all') {
                    filterPortfolioItems('all');
                } else if (subcategories[category]) {
                    // Show only the relevant subcategory container
                    const subcatContainer = document.getElementById(`${category}-subcats`);
                    if (subcatContainer) {
                        subcatContainer.style.display = 'flex';
                    }
                    filterPortfolioItems(category);
                }
            }
        });

        document.querySelectorAll('.inner-filters').forEach(innerFilters => {
            innerFilters.addEventListener('click', (e) => {
                if (e.target.classList.contains('inner-filter-btn')) {
                    const category = e.target.dataset.filter;
                    innerFilters.querySelectorAll('.inner-filter-btn').forEach(btn => btn.classList.remove('active'));
                    e.target.classList.add('active');
                    filterPortfolioItems(category);
                }
            });
        });
    }

    function showPopup(item) {
        const popup = document.getElementById('fullscreen-popup');
        document.getElementById('popup-img').src = item.src;
        document.getElementById('popup-title').innerText = item.title;
        document.getElementById('popup-subtitle').innerText = item.subtitle;
        document.getElementById('popup-description').innerText = item.description;
      
        popup.classList.add('show');
        popup.style.display = 'flex';
        document.body.style.overflow = 'hidden';
      }
    // Initialize when DOM is loaded
    initializePortfolio();

    // --- üü£ HOME SECTION SCROLL PROGRESS BAR (HEADER) ---
    const homeProgressBar = document.querySelector('.home-progress-bar-fill');
    const homeProgressBarBg = document.querySelector('.home-progress-bar-bg');
    const progressBot = document.querySelector('.progress-bot');

    function updateHomeProgressBar() {
        const homeSection = document.querySelector('.home-section');
        if (!homeSection || !homeProgressBar || !homeProgressBarBg || !progressBot) return;
        const rect = homeSection.getBoundingClientRect();
        const windowHeight = window.innerHeight;
        // Only animate if home section is in view
        if (rect.bottom > 0 && rect.top < windowHeight) {
            const sectionHeight = rect.height - windowHeight;
            let progress = (windowHeight - rect.top) / (sectionHeight > 0 ? sectionHeight : 1);
            progress = Math.max(0, Math.min(1, progress));
            // Fix direction: left-to-right as you scroll down
            // Slow down movement by applying an ease (e.g., progress^0.7)
            const easedProgress = Math.pow(progress, 0.7);
            homeProgressBar.style.width = `${easedProgress * 100}%`;
            // Move bot: left 0% to 100% of bar
            const barWidth = homeProgressBarBg.offsetWidth - progressBot.offsetWidth;
            progressBot.style.left = `${easedProgress * barWidth}px`;
            progressBot.style.opacity = 1;
            progressBot.style.width = '';
            progressBot.style.height = '';
        } else {
            homeProgressBar.style.width = '0%';
            progressBot.style.left = '0px';
            progressBot.style.opacity = 1;
            progressBot.style.width = '';
            progressBot.style.height = '';
        }
    }
    window.addEventListener('scroll', updateHomeProgressBar);
    window.addEventListener('resize', updateHomeProgressBar);
    updateHomeProgressBar();

    
    // Initialize with all items
    filteredPortfolioItems = allItems;
    renderPortfolioGrid();

    const displayToKey = {
        "Digital Invitation Cards": "digital-invitations",
        "Business Branding": "business-branding",
        "Promotional Graphics": "promotional-graphics",
        "Wedding Invitations": "wedding",
        "Engagement Invitations": "engagement",
        "Save-the-Date Cards": "save-the-date",
        "Birthday & Anniversary Cards": "birthday",
        "Community Gathering": "community",
        "Grand Opening": "grand-opening",
        "Logo Design": "logo",
        "Business Cards": "business-cards",
        "Social Media Graphics": "social-media",
        "Packaging Design": "packaging",
        "Posters, Flyers & Banners": "posters",
        "Social Media Creatives": "social-creatives",
        "Reels & Ad Graphics": "reels"
    };

    let items = JSON.parse(localStorage.getItem('portfolioItems') || '[]');
    items = items.map(item => ({
        ...item,
        outerCategory: displayToKey[item.outerCategory] || item.outerCategory,
        innerCategory: displayToKey[item.innerCategory] || item.innerCategory
    }));
    localStorage.setItem('portfolioItems', JSON.stringify(items));
    alert('Portfolio items fixed!');

});

// Portfolio Section
async function loadPortfolioData() {
    try {
        const response = await fetch('portfolio.json');
        if (!response.ok) {
            throw new Error('Portfolio JSON not found or server error');
        }
        const data = await response.json();
        console.log('Loaded portfolio data:', data); // Debug log
        return data;
    } catch (error) {
        console.error('Error loading portfolio data:', error);
        alert('Could not load portfolio data. Check the JSON file path and server.');
        return [];
    }
}

function renderPortfolioGrid(items) {
    const portfolioGrid = document.getElementById('portfolio-grid');
    portfolioGrid.innerHTML = '';

    if (!items || items.length === 0) {
        portfolioGrid.innerHTML = '<p style="color: #fff; text-align: center;">No works found for this category.</p>';
        return;
    }

    items.forEach(item => {
        const portfolioItem = document.createElement('div');
        portfolioItem.className = 'portfolio-item';
        portfolioItem.innerHTML = `
            <img src="${item.src}" alt="${item.title}" loading="lazy" onerror="this.style.display='none'">
            <div class="portfolio-item-info">
                <h3>${item.title}</h3>
                <p>${item.subtitle}</p>
            </div>
        `;
        portfolioItem.addEventListener('click', () => showFullscreenPopup(item));
        portfolioGrid.appendChild(portfolioItem);
    });
}

function showFullscreenPopup(item) {
    const popup = document.getElementById('fullscreen-popup');
    const popupImg = document.getElementById('popup-img');
    const popupCaption = document.getElementById('popup-caption');

    popupImg.src = item.src;
    popupCaption.innerHTML = `
        <h3>${item.title}</h3>
        <p class="subtitle">${item.subtitle}</p>
        <p class="description">${item.description}</p>
    `;

    popup.style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function initializePortfolio() {
    const outerFilters = document.querySelector('.outer-filters');
    const innerFilters = document.querySelectorAll('.inner-filters');
    let portfolioData = [];
    let currentFilter = 'all';

    // Load portfolio data
    loadPortfolioData().then(data => {
        portfolioData = data;
        renderPortfolioGrid(data);
    });

    // Handle outer filter clicks
    outerFilters.addEventListener('click', (e) => {
        if (!e.target.classList.contains('filter-btn')) return;

        // Update active state
        outerFilters.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
        e.target.classList.add('active');

        // Hide all inner filters
        innerFilters.forEach(filter => filter.style.display = 'none');

        // Show relevant inner filters
        const filter = e.target.dataset.filter;
        if (filter !== 'all') {
            const relevantInnerFilter = document.getElementById(`${filter}-subcats`);
            if (relevantInnerFilter) {
                relevantInnerFilter.style.display = 'flex';
            }
        }

        // Filter and render items
        currentFilter = filter;
        const filteredItems = filter === 'all' 
            ? portfolioData 
            : portfolioData.filter(item => item.outerCategory === filter);
        renderPortfolioGrid(filteredItems);
    });

    // Handle inner filter clicks
    innerFilters.forEach(filterContainer => {
        filterContainer.addEventListener('click', (e) => {
            if (!e.target.classList.contains('inner-filter-btn')) return;

            // Update active state
            filterContainer.querySelectorAll('.inner-filter-btn').forEach(btn => btn.classList.remove('active'));
            e.target.classList.add('active');

            // Filter and render items
            const innerFilter = e.target.dataset.filter;
            const filteredItems = portfolioData.filter(item => 
                item.outerCategory === currentFilter && item.innerCategory === innerFilter
            );
            renderPortfolioGrid(filteredItems);
        });
    });

    // Handle popup close
    const popup = document.getElementById('fullscreen-popup');
    const closeBtn = popup.querySelector('.popup-close');
    
    closeBtn.addEventListener('click', () => {
        popup.style.display = 'none';
        document.body.style.overflow = 'auto';
    });

    popup.addEventListener('click', (e) => {
        if (e.target === popup) {
            popup.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    });
}

// Initialize portfolio when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    initializePortfolio();
});